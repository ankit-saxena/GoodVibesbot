0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files (x86)\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install' ]
2 info using npm@1.4.9
3 info using node@v0.10.28
4 verbose node symlink C:\Program Files (x86)\nodejs\\node.exe
5 verbose readDependencies using package.json deps
6 verbose install where, deps [ 'C:\\Users\\Akshat Goel\\WebstormProjects\\GoodVibesbot\\node_modules\\twit',
6 verbose install   [ 'oauth', 'mocha', 'colors', 'memwatch', 'async' ] ]
7 info preinstall twit@1.1.15
8 verbose readDependencies using package.json deps
9 verbose already installed skipping oauth@0.9.9 C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit
10 verbose already installed skipping mocha@1.8.1 C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit
11 verbose already installed skipping colors@0.6.x C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit
12 verbose cache add [ 'memwatch@0.2.2', null ]
13 verbose cache add name=undefined spec="memwatch@0.2.2" args=["memwatch@0.2.2",null]
14 verbose parsed url { protocol: null,
14 verbose parsed url   slashes: null,
14 verbose parsed url   auth: null,
14 verbose parsed url   host: null,
14 verbose parsed url   port: null,
14 verbose parsed url   hostname: null,
14 verbose parsed url   hash: null,
14 verbose parsed url   search: null,
14 verbose parsed url   query: null,
14 verbose parsed url   pathname: 'memwatch@0.2.2',
14 verbose parsed url   path: 'memwatch@0.2.2',
14 verbose parsed url   href: 'memwatch@0.2.2' }
15 verbose cache add name="memwatch" spec="0.2.2" args=["memwatch","0.2.2"]
16 verbose parsed url { protocol: null,
16 verbose parsed url   slashes: null,
16 verbose parsed url   auth: null,
16 verbose parsed url   host: null,
16 verbose parsed url   port: null,
16 verbose parsed url   hostname: null,
16 verbose parsed url   hash: null,
16 verbose parsed url   search: null,
16 verbose parsed url   query: null,
16 verbose parsed url   pathname: '0.2.2',
16 verbose parsed url   path: '0.2.2',
16 verbose parsed url   href: '0.2.2' }
17 verbose addNamed [ 'memwatch', '0.2.2' ]
18 verbose addNamed [ '0.2.2', '0.2.2' ]
19 verbose already installed skipping async@0.2.9 C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit
20 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
21 verbose lock memwatch@0.2.2 C:\Users\Akshat Goel\AppData\Roaming\npm-cache\de70a2ed-memwatch-0-2-2.lock
22 verbose url raw memwatch
23 verbose url resolving [ 'https://registry.npmjs.org/', './memwatch' ]
24 verbose url resolved https://registry.npmjs.org/memwatch
25 info trying registry request attempt 1 at 15:36:45
26 verbose etag "1EYNNWGKNS17A5G3TJAA5AVFH"
27 http GET https://registry.npmjs.org/memwatch
28 http 304 https://registry.npmjs.org/memwatch
29 silly registry.get cb [ 304,
29 silly registry.get   { date: 'Fri, 20 Jun 2014 10:06:47 GMT',
29 silly registry.get     server: 'Apache',
29 silly registry.get     via: '1.1 varnish',
29 silly registry.get     'last-modified': 'Fri, 20 Jun 2014 10:06:47 GMT',
29 silly registry.get     'cache-control': 'max-age=30',
29 silly registry.get     etag: '"1EYNNWGKNS17A5G3TJAA5AVFH"',
29 silly registry.get     'x-served-by': 'cache-syd1621-SYD',
29 silly registry.get     'x-cache': 'MISS',
29 silly registry.get     'x-cache-hits': '0',
29 silly registry.get     'x-timer': 'S1403258807.138313,VS0,VE186',
29 silly registry.get     vary: 'Accept',
29 silly registry.get     'content-length': '0',
29 silly registry.get     'keep-alive': 'timeout=10, max=50',
29 silly registry.get     connection: 'Keep-Alive' } ]
30 verbose etag memwatch from cache
31 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
32 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
33 silly resolved [ { name: 'memwatch',
33 silly resolved     description: 'Keep an eye on your memory usage, and discover and isolate leaks.',
33 silly resolved     version: '0.2.2',
33 silly resolved     author: { name: 'Lloyd Hilaiel', url: 'http://lloyd.io' },
33 silly resolved     engines: { node: '>= 0.6.0' },
33 silly resolved     repository:
33 silly resolved      { type: 'git',
33 silly resolved        url: 'https://github.com/lloyd/node-memwatch.git' },
33 silly resolved     main: 'include.js',
33 silly resolved     licenses: [ [Object] ],
33 silly resolved     bugs: { url: 'https://github.com/lloyd/node-memwatch/issues' },
33 silly resolved     scripts: { install: 'node-gyp rebuild', test: 'mocha tests' },
33 silly resolved     devDependencies: { mocha: '1.2.2', should: '0.6.3', 'node-gyp': '0.5.7' },
33 silly resolved     contributors: [ [Object], [Object], [Object] ],
33 silly resolved     readme: '`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://secure.travis-ci.org/lloyd/node-memwatch.png)](http://travis-ci.org/lloyd/node-memwatch)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch`\n\nor\n\n- `git clone git://github.com/lloyd/node-memwatch.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require(\'memwatch\');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on(\'leak\', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: \'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr\' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we\'re talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on(\'stats\', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  "num_full_gc": 17,\n  "num_inc_gc": 8,\n  "heap_compactions": 8,\n  "estimated_base": 2592568,\n  "current_base": 2592568,\n  "min": 2499912,\n  "max": 2592568,\n  "usage_trend": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it\'s best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  "before": { "nodes": 11625, "size_bytes": 1869904, "size": "1.78 mb" },\n  "after":  { "nodes": 21435, "size_bytes": 2119136, "size": "2.02 mb" },\n  "change": { "size_bytes": 249232, "size": "243.39 kb", "freed_nodes": 197,\n    "allocated_nodes": 10007,\n    "details": [\n      { "what": "String",\n        "size_bytes": -2120,  "size": "-2.07 kb",  "+": 3,    "-": 62\n      },\n      { "what": "Array",\n        "size_bytes": 66687,  "size": "65.13 kb",  "+": 4,    "-": 78\n      },\n      { "what": "LeakingClass",\n        "size_bytes": 239952, "size": "234.33 kb", "+": 9998, "-": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on(\'stats\')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n',
33 silly resolved     readmeFilename: 'README.md',
33 silly resolved     gypfile: true,
33 silly resolved     homepage: 'https://github.com/lloyd/node-memwatch',
33 silly resolved     _id: 'memwatch@0.2.2',
33 silly resolved     _shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
33 silly resolved     _from: 'memwatch@0.2.2',
33 silly resolved     _resolved: 'https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz' } ]
34 info install memwatch@0.2.2 into C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit
35 info installOne memwatch@0.2.2
36 info C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules\memwatch unbuild
37 verbose tar unpack C:\Users\Akshat Goel\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
38 silly lockFile 53322539-dules-twit-node-modules-memwatch tar://C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules\memwatch
39 verbose lock tar://C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules\memwatch C:\Users\Akshat Goel\AppData\Roaming\npm-cache\53322539-dules-twit-node-modules-memwatch.lock
40 silly lockFile 1645c50c-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Akshat Goel\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
41 verbose lock tar://C:\Users\Akshat Goel\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz C:\Users\Akshat Goel\AppData\Roaming\npm-cache\1645c50c-cache-memwatch-0-2-2-package-tgz.lock
42 silly gunzTarPerm modes [ '755', '644' ]
43 silly gunzTarPerm extractEntry package.json
44 silly gunzTarPerm extractEntry .npmignore
45 silly gunzTarPerm extractEntry README.md
46 silly gunzTarPerm extractEntry tests.js
47 silly gunzTarPerm extractEntry foo.js
48 silly gunzTarPerm extractEntry include.js
49 silly gunzTarPerm extractEntry .travis.yml
50 silly gunzTarPerm extractEntry ChangeLog
51 silly gunzTarPerm extractEntry #wscript#
52 silly gunzTarPerm extractEntry binding.gyp
53 silly gunzTarPerm extractEntry src/heapdiff.cc
54 silly gunzTarPerm extractEntry src/heapdiff.hh
55 silly gunzTarPerm extractEntry src/init.cc
56 silly gunzTarPerm extractEntry src/memwatch.cc
57 silly gunzTarPerm extractEntry src/memwatch.hh
58 silly gunzTarPerm extractEntry src/platformcompat.hh
59 silly gunzTarPerm extractEntry src/util.cc
60 silly gunzTarPerm extractEntry src/util.hh
61 silly gunzTarPerm extractEntry examples/basic_heapdiff.js
62 silly gunzTarPerm extractEntry examples/do_nothing_server.js
63 silly gunzTarPerm extractEntry examples/slightly_leaky.js
64 silly lockFile 53322539-dules-twit-node-modules-memwatch tar://C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules\memwatch
65 silly lockFile 53322539-dules-twit-node-modules-memwatch tar://C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules\memwatch
66 silly lockFile 1645c50c-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Akshat Goel\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
67 silly lockFile 1645c50c-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Akshat Goel\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
68 info preinstall memwatch@0.2.2
69 verbose readDependencies using package.json deps
70 verbose readDependencies using package.json deps
71 silly resolved []
72 verbose about to build C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules\memwatch
73 info build C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules\memwatch
74 verbose linkStuff [ false,
74 verbose linkStuff   false,
74 verbose linkStuff   false,
74 verbose linkStuff   'C:\\Users\\Akshat Goel\\WebstormProjects\\GoodVibesbot\\node_modules\\twit\\node_modules' ]
75 info linkStuff memwatch@0.2.2
76 verbose linkBins memwatch@0.2.2
77 verbose linkMans memwatch@0.2.2
78 verbose rebuildBundles memwatch@0.2.2
79 info install memwatch@0.2.2
80 verbose unsafe-perm in lifecycle true
81 info memwatch@0.2.2 Failed to exec install script
82 info C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules\memwatch unbuild
83 info preuninstall memwatch@0.2.2
84 info uninstall memwatch@0.2.2
85 verbose true,C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules,C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit\node_modules unbuild memwatch@0.2.2
86 info postuninstall memwatch@0.2.2
87 error memwatch@0.2.2 install: `node-gyp rebuild`
87 error Exit status 1
88 error Failed at the memwatch@0.2.2 install script.
88 error This is most likely a problem with the memwatch package,
88 error not with npm itself.
88 error Tell the author that this fails on your system:
88 error     node-gyp rebuild
88 error You can get their info via:
88 error     npm owner ls memwatch
88 error There is likely additional logging output above.
89 error System Windows_NT 6.2.9200
90 error command "C:\\Program Files (x86)\\nodejs\\\\node.exe" "C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install"
91 error cwd C:\Users\Akshat Goel\WebstormProjects\GoodVibesbot\node_modules\twit
92 error node -v v0.10.28
93 error npm -v 1.4.9
94 error code ELIFECYCLE
95 verbose exit [ 1, true ]
